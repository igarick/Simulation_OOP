1. –°–æ–∑–¥–∞–µ—Ç—Å—è –æ—á–µ—Ä–µ–¥—å –∏–∑ –æ–±—å–µ–∫—Ç–æ–≤
2. –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –æ–±—å–µ–∫—Ç
3. —ç—Ç–æ—Ç –æ–±—å–µ–∫—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
4.1 –µ—Å–ª–∏ —É–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
4.2 –µ—Å–ª–∏ –Ω–µ—Ç - –æ–±—å–µ–∫—Ç –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ö–µ—à—Ç–∞–±–ª–∏—Ü—É
5. –≤ –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–æ—Å–µ–¥–∏ –æ–±—å–µ–∫—Ç–∞


–Ω–∞—á –∫–æ–æ—Ä 0,0
–ø–æ–∏—Å–∫ –≤–µ—Ä—à–∏–Ω: 0,0 + {-1,0 / 1,0 / 0,1 / 0,-1}
–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã -> –≤ –û—á–µ—Ä–µ–¥—å
–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å -> –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ª–æ–≤–∏—è -> –µ—Å–ª–∏ –Ω–µ—Ç
    —Ç–æ —ç—Ç—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≤ "–ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ"
    -> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–º–µ–∂–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã 1,0 + {-1,0 / 1,0 / 0,1 / 0,-1}
    -> –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ "–ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö"
    -> –¥–æ–±–∞–≤–∏—Ç—å –≤ –û—á–µ—Ä–µ–¥—å

---------------------------
–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ BFS:
–û—á–µ—Ä–µ–¥—å (Queue) ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö (Set –∏–ª–∏ boolean[][]) ‚Äî —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –¥–≤–∞–∂–¥—ã.
–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ ‚Äî —Å –Ω–µ—ë –≤—Å—ë –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.
–¶–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî –µ—Å–ª–∏ —Ç—ã –∏—â–µ—à—å –ø—É—Ç—å –¥–æ –∫–∞–∫–æ–π-—Ç–æ –∫–ª–µ—Ç–∫–∏.
–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, vertexes() –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–≤–∏–∂–µ–Ω–∏—è.
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –ø–æ–ª—è ‚Äî —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ —Ä–∞–º–∫–∏.
–¶–∏–∫–ª while ‚Äî –ø–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.

üîÅ –ê–ª–≥–æ—Ä–∏—Ç–º BFS –≤ 5 —à–∞–≥–∞—Ö:
–î–æ–±–∞–≤—å —Å—Ç–∞—Ä—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ
–ü–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞:
–í—ã–Ω—å —Ç–µ–∫—É—â—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
–ü–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ (vertexes())
–ï—Å–ª–∏ —Å–æ—Å–µ–¥ –µ—â—ë –Ω–µ –ø–æ—Å–µ—â—ë–Ω ‚Äî –¥–æ–±–∞–≤—å –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ
(–ï—Å–ª–∏ —Ü–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å)
–ü–æ–≤—Ç–æ—Ä—è–π
–ì–æ—Ç–æ–≤–æ!
-------------------------------------------------------------------------

üîß –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:

Queue<Coordinates> queue = new LinkedList<>();
Set<Coordinates> visited = new HashSet<>();

–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫—É

public class SearchResult {
    public final Set<Coordinates> visited;
    public final Map<Coordinates, Coordinates> cameFrom;

    public SearchResult(Set<Coordinates> visited, Map<Coordinates, Coordinates> cameFrom) {
        this.visited = visited;
        this.cameFrom = cameFrom;
    }
}

–¢–æ–≥–¥–∞ –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç:

public static SearchResult getAvailableSquares(Creature creature, Map map) {
    Queue<Coordinates> queue = new LinkedList<>();
    Set<Coordinates> visited = new HashSet<>();
    HashMap<Coordinates, Coordinates> cameFrom = new HashMap<>();

    int speedCount = creature.getSpeed();
    int step = 0;

    queue.add(creature.coordinates);
    visited.add(creature.coordinates);
    cameFrom.put(creature.coordinates, null);

    while (!queue.isEmpty() && step < speedCount) {
        int queueSize = queue.size();

        for (int i = 0; i < queueSize; i++) {
            Coordinates current = queue.poll();
            Set<Coordinates> reachableNeighbors = MovementUtils.getReachableNeighbors(current);

            for (Coordinates coordinates : reachableNeighbors) {
                if (visited.contains(coordinates)) {
                    continue;
                }

                Entity entity = map.getEntity(coordinates);
                if (creature.canMoveThrough(entity)) {
                    queue.add(coordinates);
                    cameFrom.put(coordinates, current);
                    visited.add(coordinates);
                }
            }
        }
        step++;
    }

    return new SearchResult(visited, cameFrom);
}
–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Java 14+, –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å SearchResult –Ω–∞ record:

java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
public record SearchResult(Set<Coordinates> visited, Map<Coordinates, Coordinates> cameFrom) {}
–¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ visited, –∏ cameFrom ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ö–æ–¥ (BFS) –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.




–í—ã —Å–∫–∞–∑–∞–ª–∏:
–∞ —ç—Ç–æ 2. –í—ã–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø
–ü–æ—Å–ª–µ –æ–±—Ö–æ–¥–∞, –ø—Ä–æ–π–¥–∏—Å—å –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—å condition.test(entity) –¥–ª—è –∫–∞–∂–¥–æ–π.

–ü—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ü–µ–ª–∏ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –ø—É—Ç—å –ø–æ cameFrom. –ö—É–¥–∞ –∑–∞–ø–∏—Å–∞—Ç—å?


ChatGPT —Å–∫–∞–∑–∞–ª:
–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –õ–æ–≥–∏–∫—É –∏–∑ –ø—É–Ω–∫—Ç–∞ 2. "–í—ã–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø" —Ç—ã –º–æ–∂–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä:

üìå –ú–µ—Ç–æ–¥: –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π —Ü–µ–ª–∏ –ø–æ —É—Å–ª–æ–≤–∏—é

public static Optional<Coordinates> findTarget(SearchResult searchResult, Map map, Predicate<Entity> condition, Coordinates start) {
    for (Coordinates coordinates : searchResult.visited) {
        Entity entity = map.getEntity(coordinates);
        if (condition.test(entity)) {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
            Coordinates step = restoreFirstStep(start, coordinates, searchResult.cameFrom);
            return Optional.of(step);
        }
    }
    return Optional.empty();
}
üìå –ú–µ—Ç–æ–¥: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞

private static Coordinates restoreFirstStep(Coordinates start, Coordinates target, Map<Coordinates, Coordinates> cameFrom) {
    Coordinates current = target;
    Coordinates previous = cameFrom.get(current);

    while (previous != null && !previous.equals(start)) {
        current = previous;
        previous = cameFrom.get(current);
    }
    return current;
}
–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—ë —ç—Ç–æ –≤–º–µ—Å—Ç–µ:

SearchResult result = getAvailableSquares(creature, map);
Optional<Coordinates> nextStep = findTarget(result, map, condition, creature.coordinates);
–¢–µ–ø–µ—Ä—å:

getAvailableSquares() –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ö–æ–¥,

findTarget(...) ‚Äî –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–µ–π –∏ –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞,

restoreFirstStep(...) ‚Äî –∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è.

–≠—Ç–æ –∏ –µ—Å—Ç—å —á–∏—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Å—Ç—Ä–µ–º–∏–ª—Å—è.











